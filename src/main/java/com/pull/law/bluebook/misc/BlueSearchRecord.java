package com.pull.law.bluebook.misc;

import com.pull.law.bluebook.helpers.ListHelper;
import lombok.Data;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;
import org.apache.logging.log4j.util.Strings;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
@Data
@Accessors(chain = true)
public class BlueSearchRecord {
    private String catLevel1 = "";
    private String catLevel2 = "";
    private String catLevel3 = "";
    private String catLevel4 = "";
    private String name = "";
    private BluePieces bluePieces;
    private String note = "";

    public void reset() {
        catLevel1 = "";
        catLevel2 = "";
        catLevel3 = "";
        catLevel4 = "";
        name = "";
        bluePieces = null;
        note = "";
    }

    public static BlueSearchRecord copy(final BlueSearchRecord inBlueSearchRecord) {
        return new BlueSearchRecord()
                .setCatLevel1(inBlueSearchRecord.getCatLevel1())
                .setCatLevel2(inBlueSearchRecord.getCatLevel2())
                .setCatLevel3(inBlueSearchRecord.getCatLevel3())
                .setCatLevel4(inBlueSearchRecord.getCatLevel4())
                .setName(inBlueSearchRecord.getName())
                .setBluePieces((inBlueSearchRecord.getBluePieces()))
                .setNote(inBlueSearchRecord.getNote());
    }

    public static BlueSearchRecord copyTitles(final BlueSearchRecord inBlueSearchRecord) {
        return new BlueSearchRecord()
                .setCatLevel1(inBlueSearchRecord.getCatLevel1())
                .setCatLevel2(inBlueSearchRecord.getCatLevel2())
                .setCatLevel3(inBlueSearchRecord.getCatLevel3());
    }

    public BlueSearchRecord setValue(final String value) {
        if (value != null) {
            final BluePieces tempBluePieces = BluePieces.of(value);
            if (tempBluePieces != null) {
                this.bluePieces = tempBluePieces;
            }
        }
        return this;
    }

    public String toCsv() {
        return _toWhatever(",");
    }

    public String toPipe() {
        return _toWhatever("|");
    }

    private String _toWhatever(final String delimiter) {
        try {
            if (bluePieces == null) {
                return null;
            }
            return wrap(catLevel1) + delimiter +
                    wrap(catLevel2) + delimiter +
                    wrap(catLevel3) + delimiter +
                    wrap(catLevel4) + delimiter +
                    wrap(name) + delimiter +
                    wrap(bluePieces.getOriginalBluebook()) + delimiter +
                    wrap(bluePieces.getNormalizedBluebook()) + delimiter +
                    wrap(note);
        } catch (Exception e) {
            throw new IllegalArgumentException(e);
        }
    }

    private String wrap(final String msg) {
        return Strings.isEmpty(msg) ? "\"\"" : "\"" + msg + "\"";
    }

    public static String headerCsv() {
        return _header(",");
    }

    public static String headerPipe() {
        return _header("|");
    }

    private static String _header(final String delimiter) {
        return "cat_level_1" + delimiter +
                "cat_level_2" + delimiter +
                "cat_level_3" + delimiter +
                "cat_level_4" + delimiter +
                "name" + delimiter +
                "value_original" + delimiter +
                "value_normalized" + delimiter +
                "note";
    }

    public static String creatOracleTable() {
        final StringBuilder sb = new StringBuilder();
        sb
                .append("DROP TABLE CITATION_LOOKUP; \n")
                .append("CREATE TABLE CITATION_LOOKUP ( \n")
                .append("  id                  INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY \n")
                .append(", deleted             NUMBER(1,0) DEFAULT 0 NOT NULL \n")
                .append(", created             TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL \n")
                .append(", modified            TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL \n")
                .append(", cat_level_1         varchar(256) NOT NULL \n")
                .append(", cat_level_2         varchar(256)  \n")
                .append(", cat_level_3         varchar(256)  \n")
                .append(", cat_level_4         varchar(256)  \n")
                .append(", name                varchar(256)  NOT NULL \n")
                .append(", value_original      varchar(256) NOT NULL \n")
                .append(", value_normalized    varchar(256) \n")
                .append(", note                varchar(4000) \n")
                .append("); \n")
                .append("CREATE INDEX citation_lookup_cats_idx ON citation_lookup( cat_level_1, cat_level_2, cat_level_3, cat_level_4 ); \n")
                .append("\n\n")
        ;
        return sb.toString();
    }

    private static String wrapSingleQuote(final String msg) {
        if (Strings.isEmpty(msg)) {
            return "''";
        }
        String tempMsg = msg.replace("'", "''");
        tempMsg = tempMsg.replace("&", " and ");
        tempMsg = tempMsg.replaceAll("\\s+", " ");
        return "'" + tempMsg + "'";
    }

    public static String buildOracleInserts(final List<BlueSearchRecord> recs) {
        final StringBuilder sb = new StringBuilder();
        if (ListHelper.isEmptyOrNull(recs)) {
            throw new IllegalArgumentException("Can not build Oracle data for empty List.");
        }
        final AtomicInteger i = new AtomicInteger(0);
        for (final BlueSearchRecord rec : recs) {
            sb // Do not list 'id', oracle will fill it in
                    .append("INSERT INTO citation_lookup( " +
                            "cat_level_1, " +
                            "cat_level_2, " +
                            "cat_level_3, " +
                            "cat_level_4, " +
                            "name, " +
                            "value_original, " +
                            "value_normalized, " +
                            "note " +
                            ") \n")
                    .append(" VALUES (")
                    .append(wrapSingleQuote(rec.catLevel1)).append(", ")
                    .append(wrapSingleQuote(rec.catLevel2)).append(", ")
                    .append(wrapSingleQuote(rec.catLevel3)).append(", ")
                    .append(wrapSingleQuote(rec.catLevel4)).append(", ")
                    .append(wrapSingleQuote(rec.name)).append(", ")
                    .append(wrapSingleQuote(rec.bluePieces.getOriginalBluebook())).append(", ")
                    .append(wrapSingleQuote(rec.bluePieces.getNormalizedBluebook())).append(", ")
                    .append(wrapSingleQuote(rec.note)).append(");\n")
            ;
        }
        return sb.toString();
    }
}